package pkg

func fn() {
	var b1, b2 []byte
	copy(b2, b1)

	copy(b2, b1)

	type T [][16]byte
	var a T
	b := make([]interface{}, len(a))
	for i := range b {
		b[i] = a[i]
	}

	var b3, b4 []*byte
	copy(b4, b3)

	var m map[int]byte
	for i, v := range b1 {
		m[i] = v
	}

}

func src() []interface{} { return nil }

func fn1() {
	// Don't flag this, the source is dynamic
	var dst []interface{}
	for i := range src() {
		dst[i] = src()[i]
	}
}

func fn2() {
	type T struct {
		b []byte
	}

	var src []byte
	var dst T
	copy(dst.b, src)
}

func fn3() {
	var src []byte
	var dst [][]byte
	copy(dst[0], src)
	for i, v := range src {
		// Don't flag, destination depends on loop variable
		dst[i][i] = v
	}
	for i, v := range src {
		// Don't flag, destination depends on loop variable
		dst[v][i] = v
	}
}

func fn4() {
	var b []byte
	var a1 [5]byte
	var a2 [10]byte
	var a3 [5]byte

	copy(a1[:], b)
	copy(b, a1[:])
	copy(a2[:], a1[:])
	a3 = a1

	a1p := &a1
	a2p := &a2
	a3p := &a3
	copy(a1p[:], b)
	copy(b, a1p[:])
	copy(a2p[:], a1p[:])
	*a3p = *a1p

	copy(a2p[:], a1[:])
	*a3p = a1
	copy(a2[:], a1p[:])
	a3 = *a1p
}

func fn5() {
	var src, dst []byte
	copy(dst, src)

	len := func([]byte) int { return 0 }
	for i := 0; i < len(src); i++ {
		dst[i] = src[i]
	}
}
