"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.activate = void 0;
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const fs_1 = tslib_1.__importDefault(require("fs"));
const coc_nvim_1 = require("coc.nvim");
async function activate(context) {
    const config = coc_nvim_1.workspace.getConfiguration().get('sh', {});
    if (config.enable === false) {
        return;
    }
    // TODO add config options:
    const serverOptions = {
        command: (config.commandPath || await serverBin()),
        args: ['start'],
        transport: coc_nvim_1.TransportKind.stdio,
        options: {
            env: {
                // => https://github.com/bash-lsp/bash-language-server/blob/master/server/src/config.ts
                EXPLAINSHELL_ENDPOINT: config.explainshellEndpoint,
                GLOB_PATTERN: config.globPattern,
                HIGHLIGHT_PARSING_ERRORS: config.highlightParsingErrors.toString()
            }
        }
    };
    const clientOptions = {
        documentSelector: ['sh']
    };
    const client = new coc_nvim_1.LanguageClient('sh', 'bash-language-server', serverOptions, clientOptions);
    context.subscriptions.push(coc_nvim_1.services.registLanguageClient(client), coc_nvim_1.commands.registerCommand("sh.version", async () => {
        const rootDir = path_1.default.join(__dirname, '..');
        const { version } = JSON.parse(fs_1.default.readFileSync(path_1.default.resolve(rootDir, 'package.json'), 'utf-8'));
        coc_nvim_1.window.showMessage(`Version: ${version} [node: ${process.versions.node}]`, 'more');
    }));
}
exports.activate = activate;
async function serverBin() {
    let bin = require.resolve('bash-language-server/bin/main.js');
    try {
        bin = fs_1.default.realpathSync(bin);
    }
    catch (e) {
        // ignore
    }
    return bin;
}
//# sourceMappingURL=extension.js.map