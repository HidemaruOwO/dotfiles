var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// src/index.ts
__markAsModule(exports);
__export(exports, {
  activate: () => activate
});
var import_coc = __toModule(require("coc.nvim"));

// src/constants.ts
var lspName = "zig-language-server";

// src/index.ts
async function activate(context) {
  const config = import_coc.workspace.getConfiguration("zig");
  const command = config.get("path", "");
  if (!config.get("enabled", true)) {
    return;
  }
  if (!command) {
    return import_coc.window.showErrorMessage("Failed to find the zls executable! Please specify its path in your settings.");
  }
  const serverOptions = {
    command,
    args: config.get("debugLog", false) ? ["--debug-log"] : []
  };
  const clientOptions = {
    documentSelector: [{scheme: "file", language: "zig"}],
    outputChannel: import_coc.window.createOutputChannel("Zig Language Server")
  };
  const client = new import_coc.LanguageClient("zls", lspName, serverOptions, clientOptions);
  context.subscriptions.push(import_coc.services.registLanguageClient(client));
  if (config.get("startUpMessage", true)) {
    import_coc.window.showMessage(`${lspName} running!`);
  }
  import_coc.commands.registerCommand("start", client.start);
  import_coc.commands.registerCommand("stop", client.stop);
  import_coc.commands.registerCommand("restart", async () => {
    await client.stop();
    client.start();
  });
}
