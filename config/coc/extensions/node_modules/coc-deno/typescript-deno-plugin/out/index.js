const projectSettings = new Map();
const defaultSettings = {
  cache: null,
  enable: false,
  codeLens: null,
  config: null,
  importMap: null,
  internalDebug: false,
  lint: false,
  path: null,
  suggest: {
    autoImports: true,
    completeFunctionCalls: false,
    names: true,
    paths: true,
    imports: {
      autoDiscover: true,
      hosts: {}
    }
  },
  unstable: false
};
function getSettings(project) {
  var _a;
  return (_a = projectSettings.get(project.getProjectName())) != null ? _a : defaultSettings;
}
function updateSettings(project, settings) {
  projectSettings.set(project.getProjectName(), settings);
  Object.assign(defaultSettings, settings);
}
class Plugin {
  constructor() {
    this.log = (_msg) => {
    };
  }
  create(info) {
    const { languageService: ls, project } = info;
    this.log = (msg) => project.projectService.logger.info(`[typescript-deno-plugin] ${msg}`);
    this.project = project;
    const callIfDisabled = (fn, emptyReturn) => {
      const target = ls[fn];
      return (...args) => {
        if (getSettings(this.project).enable) {
          return emptyReturn;
        }
        return target.call(ls, ...args);
      };
    };
    const commentSelection = callIfDisabled("commentSelection", []);
    const findReferences = callIfDisabled("findReferences", void 0);
    const findRenameLocations = callIfDisabled("findRenameLocations", void 0);
    const getApplicableRefactors = callIfDisabled("getApplicableRefactors", []);
    const getBraceMatchingAtPosition = callIfDisabled("getBraceMatchingAtPosition", []);
    const getBreakpointStatementAtPosition = callIfDisabled("getBreakpointStatementAtPosition", void 0);
    const getCodeFixesAtPosition = callIfDisabled("getCodeFixesAtPosition", []);
    const getCompilerOptionsDiagnostics = callIfDisabled("getCompilerOptionsDiagnostics", []);
    const getCompletionEntryDetails = callIfDisabled("getCompletionEntryDetails", void 0);
    const getCompletionEntrySymbol = callIfDisabled("getCompletionEntrySymbol", void 0);
    const getCompletionsAtPosition = callIfDisabled("getCompletionsAtPosition", void 0);
    const getDefinitionAndBoundSpan = callIfDisabled("getDefinitionAndBoundSpan", void 0);
    const getDefinitionAtPosition = callIfDisabled("getDefinitionAtPosition", void 0);
    const getDocCommentTemplateAtPosition = callIfDisabled("getDocCommentTemplateAtPosition", void 0);
    const getDocumentHighlights = callIfDisabled("getDocumentHighlights", void 0);
    const getEditsForFileRename = callIfDisabled("getEditsForFileRename", []);
    const getEditsForRefactor = callIfDisabled("getEditsForRefactor", void 0);
    const getImplementationAtPosition = callIfDisabled("getImplementationAtPosition", void 0);
    const getNameOrDottedNameSpan = callIfDisabled("getNameOrDottedNameSpan", void 0);
    const getNavigateToItems = callIfDisabled("getNavigateToItems", []);
    const getNavigationBarItems = callIfDisabled("getNavigationBarItems", []);
    const getOutliningSpans = callIfDisabled("getOutliningSpans", []);
    const getQuickInfoAtPosition = callIfDisabled("getQuickInfoAtPosition", void 0);
    const getReferencesAtPosition = callIfDisabled("getReferencesAtPosition", void 0);
    const getSemanticDiagnostics = callIfDisabled("getSemanticDiagnostics", []);
    const getSignatureHelpItems = callIfDisabled("getSignatureHelpItems", void 0);
    const getSuggestionDiagnostics = callIfDisabled("getSuggestionDiagnostics", []);
    const getSyntacticDiagnostics = callIfDisabled("getSyntacticDiagnostics", []);
    const getTodoComments = callIfDisabled("getTodoComments", []);
    const getTypeDefinitionAtPosition = callIfDisabled("getTypeDefinitionAtPosition", void 0);
    const organizeImports = callIfDisabled("organizeImports", []);
    const prepareCallHierarchy = callIfDisabled("prepareCallHierarchy", void 0);
    const provideCallHierarchyIncomingCalls = callIfDisabled("provideCallHierarchyIncomingCalls", []);
    const provideCallHierarchyOutgoingCalls = callIfDisabled("provideCallHierarchyOutgoingCalls", []);
    const toggleLineComment = callIfDisabled("toggleLineComment", []);
    const toggleMultilineComment = callIfDisabled("toggleMultilineComment", []);
    const uncommentSelection = callIfDisabled("uncommentSelection", []);
    return {
      ...ls,
      commentSelection,
      findReferences,
      findRenameLocations,
      getApplicableRefactors,
      getBraceMatchingAtPosition,
      getBreakpointStatementAtPosition,
      getCodeFixesAtPosition,
      getCompilerOptionsDiagnostics,
      getCompletionEntryDetails,
      getCompletionEntrySymbol,
      getCompletionsAtPosition,
      getDefinitionAndBoundSpan,
      getDefinitionAtPosition,
      getDocCommentTemplateAtPosition,
      getDocumentHighlights,
      getEditsForFileRename,
      getEditsForRefactor,
      getImplementationAtPosition,
      getNameOrDottedNameSpan,
      getNavigateToItems,
      getNavigationBarItems,
      getOutliningSpans,
      getQuickInfoAtPosition,
      getReferencesAtPosition,
      getSemanticDiagnostics,
      getSignatureHelpItems,
      getSuggestionDiagnostics,
      getSyntacticDiagnostics,
      getTodoComments,
      getTypeDefinitionAtPosition,
      organizeImports,
      prepareCallHierarchy,
      provideCallHierarchyIncomingCalls,
      provideCallHierarchyOutgoingCalls,
      toggleLineComment,
      toggleMultilineComment,
      uncommentSelection
    };
  }
  onConfigurationChanged(settings) {
    this.log(`onConfigurationChanged(${JSON.stringify(settings)})`);
    updateSettings(this.project, settings);
    this.project.refreshDiagnostics();
  }
}
function init() {
  console.log("INIT typescript-deno-plugin");
  return new Plugin();
}
module.exports = init;
