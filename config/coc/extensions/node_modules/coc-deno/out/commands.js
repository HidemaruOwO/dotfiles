"use strict";
// Copyright 2018-2021 the Deno authors. All rights reserved. MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkTSServer = exports.restart = exports.reloadImportRegistries = exports.welcome = exports.test = exports.status = exports.showReferences = exports.initializeWorkspace = exports.doInitialize = exports.cache = void 0;
/** Contains handlers for commands that are enabled in Visual Studio Code for
 * the extension. */
const coc_nvim_1 = require("coc.nvim");
const constants_1 = require("./constants");
const lsp_extensions_1 = require("./lsp_extensions");
let terminal;
/** For the current document active in the editor tell the Deno LSP to cache
 * the file and all of its dependencies in the local cache. */
function cache(_context, client) {
    return async () => {
        const { document } = await coc_nvim_1.workspace.getCurrentState();
        return coc_nvim_1.window.withProgress({
            title: "caching",
            cancellable: true,
        }, () => {
            return client.sendRequest(lsp_extensions_1.cache, {
                referrer: { uri: document.uri.toString() },
                uris: [],
            });
        });
    };
}
exports.cache = cache;
async function doInitialize() {
    const title = "Initialize Deno Project";
    const linting = "Enable Deno linting?";
    const unstable = "Enable Deno unstable APIs?";
    const prettier = "Disable coc-prettier for current project?";
    const items = [linting, unstable];
    if (coc_nvim_1.extensions.all.find((e) => e.id === "coc-prettier")) {
        items.push(prettier);
    }
    const settings = await coc_nvim_1.window.showPickerDialog(items, title);
    if (!settings)
        return;
    const config = coc_nvim_1.workspace.getConfiguration(constants_1.EXTENSION_NS);
    config.update("enable", true);
    config.update("lint", settings.includes(linting));
    config.update("unstable", settings.includes(unstable));
    if (settings.includes(prettier)) {
        const prettierConfig = coc_nvim_1.workspace.getConfiguration("prettier");
        prettierConfig.update("disableLanguages", ["typescript", "javascript"]);
    }
    coc_nvim_1.window.showMessage("Deno is now setup in this workspace.");
}
exports.doInitialize = doInitialize;
function initializeWorkspace() {
    return async () => {
        await doInitialize();
        await checkTSServer();
    };
}
exports.initializeWorkspace = initializeWorkspace;
function showReferences(uri, position, locations) {
    if (!uri)
        return;
    coc_nvim_1.commands.executeCommand("editor.action.showReferences", coc_nvim_1.Uri.parse(uri), position, locations);
}
exports.showReferences = showReferences;
/** Open and display the "virtual document" which provides the status of the
 * Deno Language Server. */
function status(_context, client) {
    return async () => {
        const content = await client.sendRequest(lsp_extensions_1.virtualTextDocument, {
            textDocument: { uri: "deno:/status.md" },
        });
        coc_nvim_1.window.echoLines(content.split("\n"));
    };
}
exports.status = status;
async function test(uri, name) {
    const config = coc_nvim_1.workspace.getConfiguration(constants_1.EXTENSION_NS);
    const testArgs = [...config.get("codeLens.testArgs", [])];
    if (config.has("unstable")) {
        testArgs.push("--unstable");
    }
    if (!testArgs.includes("--import-map")) {
        if (config.has("importMap")) {
            testArgs.push("--import-map", String(config.get("importMap")));
        }
    }
    const env = config.has("cache")
        ? { "DENO_DIR": config.get("cache") }
        : undefined;
    const bin = config.get("path", "deno");
    const args = [
        "test",
        ...testArgs,
        "--filter",
        `"${name}"`,
        coc_nvim_1.Uri.parse(uri).fsPath,
    ];
    if (terminal) {
        terminal.dispose();
        terminal = undefined;
    }
    terminal = await coc_nvim_1.window.createTerminal({ name, cwd: coc_nvim_1.workspace.root, env });
    terminal.sendText(`${bin} ${args.join(" ")}`);
}
exports.test = test;
function welcome(_context, _client) {
    return () => {
        // TODO
    };
}
exports.welcome = welcome;
function reloadImportRegistries(_context, client) {
    return () => client.sendRequest(lsp_extensions_1.reloadImportRegistries);
}
exports.reloadImportRegistries = reloadImportRegistries;
function restart(_context, client) {
    return async () => {
        await client.stop();
        client.start();
    };
}
exports.restart = restart;
// deno-lint-ignore require-await
async function checkTSServer() {
    const tsserverConfig = coc_nvim_1.workspace.getConfiguration("tsserver");
    const enable = tsserverConfig.get("enable");
    if (enable) {
        tsserverConfig.update("enable", false);
    }
}
exports.checkTSServer = checkTSServer;
//# sourceMappingURL=commands.js.map