{
  "name": "coc-prettier",
  "version": "1.1.1",
  "description": "prettier extension for coc.nvim",
  "main": "lib/index.js",
  "publisher": "chemzqm",
  "keywords": [
    "coc.nvim",
    "prettier"
  ],
  "engines": {
    "coc": ">= 0.0.30"
  },
  "scripts": {},
  "activationEvents": [
    "*"
  ],
  "contributes": {
    "configuration": {
      "type": "object",
      "title": "Prettier - Code formatter configuration",
      "properties": {
        "prettier.formatterPriority": {
          "type": "number",
          "default": 1,
          "description": "Priority of format provider, default to 1 that higher than other languageserver formatter, change to -1 to make it lower priority."
        },
        "prettier.disableLanguages": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            "vue"
          ],
          "description": "A list of languages IDs to disable this extension on",
          "scope": "window"
        },
        "prettier.eslintIntegration": {
          "type": "boolean",
          "default": false,
          "description": "Use 'prettier-eslint' instead of 'prettier'. Other settings will only be fallbacks in case they could not be inferred from eslint rules.",
          "scope": "resource"
        },
        "prettier.tslintIntegration": {
          "type": "boolean",
          "default": false,
          "description": "Use 'prettier-tslint' instead of 'prettier'. Other settings will only be fallbacks in case they could not be inferred from tslint rules.",
          "scope": "resource"
        },
        "prettier.stylelintIntegration": {
          "type": "boolean",
          "default": false,
          "description": "Use 'prettier-stylelint' instead of 'prettier'. Other settings will only be fallbacks in case they could not be inferred from stylelint rules.",
          "scope": "resource"
        },
        "prettier.requireConfig": {
          "type": "boolean",
          "default": false,
          "description": "Require a 'prettierconfig' to format",
          "scope": "resource"
        },
        "prettier.statusItemText": {
          "type": "string",
          "default": "Prettier",
          "description": "Text shown in status item.",
          "scope": "resource"
        },
        "prettier.ignorePath": {
          "type": "string",
          "default": ".prettierignore",
          "description": "Path to a .prettierignore or similar file",
          "scope": "resource"
        },
        "prettier.printWidth": {
          "type": "integer",
          "default": 80,
          "description": "Fit code within this line limit",
          "scope": "resource"
        },
        "prettier.tabWidth": {
          "type": "integer",
          "default": 2,
          "description": "Number of spaces it should use per tab",
          "scope": "resource"
        },
        "prettier.singleQuote": {
          "type": "boolean",
          "default": false,
          "description": "If true, will use single instead of double quotes",
          "scope": "resource"
        },
        "prettier.trailingComma": {
          "type": "string",
          "enum": [
            "none",
            "es5",
            "all"
          ],
          "default": "none",
          "description": "Controls the printing of trailing commas wherever possible.\n Valid options:\n    'none' - No trailing commas\n    'es5' - Trailing commas where valid in ES5 (objects, arrays, etc)\n    'all' - Trailing commas wherever possible (function arguments)",
          "scope": "resource"
        },
        "prettier.bracketSpacing": {
          "type": "boolean",
          "default": true,
          "description": "Controls the printing of spaces inside object literals",
          "scope": "resource"
        },
        "prettier.jsxBracketSameLine": {
          "type": "boolean",
          "default": false,
          "description": "If true, puts the `>` of a multi-line jsx element at the end of the last line instead of being alone on the next line",
          "scope": "resource"
        },
        "prettier.jsxSingleQuote": {
          "type": "boolean",
          "default": false,
          "description": "Use single quotes instead of double quotes in JSX"
        },
        "prettier.htmlWhitespaceSensitivity": {
          "type": "string",
          "enum": [
            "css",
            "strict",
            "ignore"
          ],
          "default": "css",
          "description": "Specify the global whitespace sensitivity for HTML files.\n Valid options: \n'css' - Respect the default value of CSS display property. \n'strict' - Whitespaces are considered sensitive. \n'ignore' - Whitespaces are considered insensitive."
        },
        "prettier.endOfLine": {
          "type": "string",
          "enum": [
            "auto",
            "lf",
            "crlf",
            "cr"
          ],
          "default": "auto",
          "description": "Specify the end of line used by prettier"
        },
        "prettier.parser": {
          "type": "string",
          "enum": [
            "babylon",
            "flow"
          ],
          "default": "babylon",
          "description": "Override the parser. You shouldn't have to change this setting.",
          "scope": "resource"
        },
        "prettier.semi": {
          "type": "boolean",
          "default": true,
          "description": "Whether to add a semicolon at the end of every line",
          "scope": "resource"
        },
        "prettier.useTabs": {
          "type": "boolean",
          "default": false,
          "description": "Indent lines with tabs",
          "scope": "resource"
        },
        "prettier.proseWrap": {
          "type": "string",
          "enum": [
            "preserve",
            "always",
            "never"
          ],
          "default": "preserve",
          "description": "(Markdown) wrap prose over multiple lines"
        },
        "prettier.arrowParens": {
          "type": "string",
          "enum": [
            "avoid",
            "always"
          ],
          "default": "avoid",
          "description": "Include parentheses around a sole arrow function parameter",
          "scope": "resource"
        }
      }
    },
    "jsonValidation": [
      {
        "fileMatch": ".prettierrc",
        "url": "http://json.schemastore.org/prettierrc"
      },
      {
        "fileMatch": ".prettierrc.json",
        "url": "http://json.schemastore.org/prettierrc"
      },
      {
        "fileMatch": "package.json",
        "url": "./package-json-schema.json"
      }
    ]
  },
  "author": "chemzqm@gmail.com",
  "license": "MIT",
  "devDependencies": {
    "@chemzqm/tsconfig": "^0.0.3",
    "@chemzqm/tslint-config": "^1.0.18",
    "@types/node": "^12.0.2",
    "coc.nvim": "^0.0.67",
    "rimraf": "^2.6.3",
    "tslint": "^5.16.0",
    "typescript": "^3.4.4"
  },
  "dependencies": {}
}
